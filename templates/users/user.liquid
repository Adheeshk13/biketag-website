<!DOCTYPE HTML>
<html lang="en">

<head>
	{% include "page/meta" %}
	{% include "page/css" %}
	
	<!-- Bootstrap -->
	{{ "/css/bootstrap.min.css" | stylesheet_tag : nonce }}
	{{ "/css/fa-all.min.css" | stylesheet_tag : nonce }}
	{{ images | json | console_log: nonce }}

	{% assign imagesPerSlide = 3 %}
	{% assign imagesLength = images.length %}
	{% assign tagsCount = images.length | divided_by:2 | floor %}
	{% assign numSlides = imagesLength | divided_by:imagesPerSlide | minus:1 %}
	{% assign cardColClass = 'col-md-4'%}
</head>
<body>

	<div class="container modal-content-wrapper">

		<div class="gallery image-modal-content">
			<header>
				<h1>({{ tagsCount }}) Tags by {{ username }}</h1>
			</header>
			<main id="image-gallery" class="images"></main>
			<footer id="gallery-pagination">
			  <button id="btnPrevious">&larr; <span class="sr-only">Previous</span></button>
			  <div>
				<div id="gallery-dots"></div>
				<span id="page"></span>
			  </div>
			  <button id="btnNext"><span class="sr-only">Next </span>&rarr;</button>
			</footer>
		  </div>

	<!-- modal popup (displayed none by default) -->
	<div class="image-modal-popup">
		<div class="wrapper">
		 <span>&times;</span>
		  <img src="" alt="Image Modal">
		  <div class="description">
			<h1>This is placeholder content</h1>
			<p>This content will be overwritten when the modal opens</p>
			<a href="#" class="primary-link" target="_blank" rel="noopener noreferrer">View BikeTag</a>
			<a href="#" class="secondary-link" target="_blank" rel="noopener noreferrer">Discussion</a>
		  </div>
		</div>
	<script nonce="{{nonce}}">
	/**
	 * Get the URL parameters
	 * source: https://css-tricks.com/snippets/javascript/get-url-variables/
	 * @param  {String} url The URL
	 * @return {Object}     The URL parameters
	 */
	var getParams = function (url) {
	  var params = {};
	  var parser = document.createElement('a');
	  parser.href = url;
	  var query = parser.search.substring(1);
	  var vars = query.split('&');
	  for (var i = 0; i < vars.length; i++) {
		var pair = vars[i].split('=');
		params[pair[0]] = decodeURIComponent(pair[1]);
	  }
	  return params;
	};


    const getTagNumbersFromText = (inputText, fallback) => {
        /// TODO: build out testers for all current games of BikeTag on Reddit
        const getTagNumbersRegex = new RegExp(
            /((?:(?:bike\s*)?(?:\s*tag)?)#(\d+)(?:(?:\s*tag)?|(?:\s*proof)?))|(?:\[(?:\s*bike\s*)(?:\s*tag\s*))#?(\d+)(?:(?:\])|(?:\s*.\s*.*\]))/gi,
        )
        const tagNumberText = inputText.match(getTagNumbersRegex)
        if (!tagNumberText) return fallback || []

        const tagNumbers = tagNumberText.reduce((numbers, text) => {
            let tagNumber = text.match(/\d+/)
            tagNumber = tagNumber && tagNumber.length ? tagNumber[0] : null

            if (!tagNumber) return numbers

            const number = Number.parseInt(tagNumber)
            if (numbers.indexOf(number) == -1) numbers.push(number)

            return numbers
        }, [])

        if (!tagNumbers.length && fallback) {
            return fallback
        }

        return tagNumbers
    }

	const getBikeTagDiscussionLinkFromImage = (image) => {
		var tagTitle = image.title || ''
		var tagDiscussionLinkIndex = tagTitle.indexOf("{")
		var tagDiscussionLink = null
		if (tagDiscussionLinkIndex !== -1) {
			var tagDisscussionSplit = tagTitle ? tagTitle.split('{') : []
			var tagDiscussionLinkLength = tagDisscussionSplit[1].indexOf('}')
			tagDiscussionLink = tagDisscussionSplit[1].substr(0, tagDiscussionLinkLength).trim()
		}
		
		return tagDiscussionLink
	}

	;(async () => {
	  	const urlParams = getParams(window.location.href)

		  const previous = document.getElementById('btnPrevious')
        const next = document.getElementById('btnNext')
        const gallery = document.getElementById('image-gallery')
        const pageIndicator = document.getElementById('page')
        const galleryDots = document.getElementById('gallery-dots');
		const images = {{ images | json }}
		
        let perPage = 8;
        let page = 1;
        let pages = Math.ceil(images.length / perPage)


        // Gallery dots
        for (var i = 0; i < pages; i++){
			const dot = document.createElement('button')
			const dotSpan = document.createElement('span')
			const dotNumber = document.createTextNode(i + 1)
          dot.classList.add('gallery-dot');
          dot.setAttribute('data-index', i);
          dotSpan.classList.add('sr-only');
          
          dotSpan.appendChild(dotNumber);
          dot.appendChild(dotSpan)
          
          dot.addEventListener('click', function(e) {
            var self = e.target
            goToPage(self.getAttribute('data-index'))
          })
          
          galleryDots.appendChild(dot)
        }

        // Previous Button
        previous.addEventListener('click', function() {
          if (page === 1) {
            page = 1;
          } else {
            page--;
            showImages();
          }
        })

        // Next Button
        next.addEventListener('click', function() {
          if (page < pages) {
            page++;
            showImages();
          }
        })

        // Jump to page
        function goToPage(index) {
          index = parseInt(index);
          page =  index + 1;
          
          showImages();
        }

		function attachClickEventsToImages () {
			// all images inside the image modal content class
			const lightboxImages = document.querySelectorAll('.image-modal-content img');

			// dynamically selects all elements inside modal popup
			const modalElement = element =>
			document.querySelector(`.image-modal-popup ${element}`);

			const body = document.querySelector('body');

			// closes modal on clicking anywhere and adds overflow back
			document.addEventListener('click', () => {
			body.style.overflow = 'auto';
			modalPopup.style.display = 'none';
			});

			const modalPopup = document.querySelector('.image-modal-popup');

			// loops over each modal content img and adds click event functionality
			lightboxImages.forEach(img => {
				const data = img.dataset;
				img.addEventListener('click', e => {
					body.style.overflow = 'hidden';
					e.stopPropagation();
					modalPopup.style.display = 'block';
					modalElement('h1').innerHTML = data.title;
					modalElement('p').innerHTML = data.description;
					modalElement('.primary-link').href = data.url;
					modalElement('img').src = data.src;

					if (data.reddit) {
						modalElement('.secondary-link').href = data.reddit;
					} else {
						modalElement('.secondary-link').style.display = 'none';
					}
				});
			});
		}

        // Load images
        function showImages() {
          while(gallery.firstChild) gallery.removeChild(gallery.firstChild)
          
          var offset = (page - 1) * perPage;
          const dots = document.querySelectorAll('.gallery-dot');
          
          for (var i = 0; i < dots.length; i++){
            dots[i].classList.remove('active');
          }
          
          dots[page - 1].classList.add('active');
          
          for (var i = offset; i < offset + perPage; i++) {
            if ( images[i] ) {
				const image = images[i]
			  const imageDescription = image.description
			  const imageUrlFull = image.link
			  const imageUrlMedium = `${imageUrlFull.substring(0, imageUrlFull.lastIndexOf('.'))}m${imageUrlFull.substring(imageUrlFull.lastIndexOf('.'))}`
			  const imageTagNumber = getTagNumbersFromText(image.description)
			  const imageTitle = image.description
			  const redditLink = getBikeTagDiscussionLinkFromImage(image)
			  const bikeTagLink = `/${imageTagNumber}`

              const template = document.createElement('div');
              const title = document.createElement('p');
              const titleText = document.createTextNode(imageDescription);
              const img = document.createElement('img');
			//   const a = document.createElement('a');
              
              template.classList.add('template')
              img.setAttribute("src", imageUrlMedium);
			  img.setAttribute('data-src', imageUrlFull);
              img.setAttribute('alt', imageTitle);
              img.setAttribute('data-title', imageTitle);
              img.setAttribute('data-description', `Tag #${imageTagNumber}`);
              img.setAttribute('data-url', bikeTagLink);
              if (!!redditLink) img.setAttribute('data-reddit', redditLink);

			//   a.appendChild(img)
            //   title.appendChild(titleText);
            //   template.appendChild(a);
              template.appendChild(img);
              gallery.appendChild(template);      
            }
          }
          
          // Animate images
          var galleryItems = document.querySelectorAll('.template')
          for (var i = 0; i < galleryItems.length; i++) {
            var onAnimateItemIn = animateItemIn(i);
            setTimeout(onAnimateItemIn, i * 100);
          }
          
          function animateItemIn(i) {
            var item = galleryItems[i];
            return function() {
              item.classList.add('animate');
            }
          }
          
          // Update page indicator
          pageIndicator.textContent = "Page " + page + " of " + pages;
		  attachClickEventsToImages()
        }

        showImages();


      })()
    </script>
	</div>
	<!-- Bootstrap -->
	{{ "/js/bootstrap.min.js" | javascript_tag : nonce }}
</body>
</html>
